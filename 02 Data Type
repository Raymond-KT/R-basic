---
title: "R programming_lecture 2"
author: "kwangtae27.kim@samsung.com"
date: "`r Sys.Date()`"
output:
  html_document:
    code_folding: hide
    toc: yes
    toc_depth: 3
    toc_float:
      collapse: yes
      smooth_scroll: no
    theme: cosmo
    highlight: tango
  word_document:
    toc: yes
    toc_depth: '3'
  pdf_document:
    latex_engine: xelatex
    toc: yes
    toc_depth: '3'
mainfont: NanumGothic
---

<style>
div.gray pre {background-color:lightgray;}
div.gray pre.r {background-color:gray;}
</style>

<style type="text/css">

body{ /* Normal  */
      font-size: 16px;
  }
td {  /* Table  */
  font-size: 16px;
}
h1.title {
  font-size: 38px;
  color: Black;
}
h1 { /* Header 1 */
  font-size: 28px;
  color: DarkBlue;
}
h2 { /* Header 2 */
    font-size: 22px;
  color: DarkBlue;
}
h3 { /* Header 3 */
  font-size: 18px;
  font-family: malgun;
  color: DarkBlue;
}
code.r{ /* Code block */
    font-size: 12px;
}
    font-size: 14px;
}
</style>


```{r xaringanExtra-clipboard, echo=FALSE}
xaringanExtra::use_clipboard()
```


## **0. R 분석환경 구축 관련 **
  
 - 지난 시간에 R 분석환경 구축이 완료되지 않은 분들은,  
   아래 유튜브 강좌를 보시면 친절하게 설명되어 있습니다. 
   
 - 참고하시어 2차 학습 전, R 분석환경 구축 해주시면 됩니다. 
  
[슬기로운통계생활 R 분석환경 구축](https://www.youtube.com/watch?v=jLcDVcgQpPI)
  
---

## **1. R 언어 입문하기 **
  
  
### **1-1. Hello world**  
  
 - 지난 시간에 빠르게 설명하고 넘어갔던 Hello World 에 대해 다시 한번 확인하고 넘어가겠습니다. 

```{r eval=FALSE}
# 1.1 R 소개
# 문자형 벡터 생성
sen <- 'Hello World!'

# 벡터 sen을 콘솔창에 출력
print(x = sen)

# 벡터 sen의 클래스 확인
class(x = sen)

# 벡터 sen의 원소 개수 확인
length(x = sen)


# 1.2 R 객체의 특징
# a에 1, b에 2를 할당
a <- 1
b <- 2

# a에 b를 할당하면 b의 값이 a로 전달
a <- b
# b에 3을 할당해도 a의 값은 2로 유지
b <- 3

# a와 b를 콘솔창에 출력
print(x = a); print(x = b)

# 객체명이 숫자로 시작하면 에러가 발생합니다.
 1a <- 3

# 객체명을 숫자로 시작하려면 백틱으로 감싸주어야 하며,
# 객체를 출력할 때에도 백틱을 사용해야 함
`1a` <- 3
print(x = `1a`)

# 백틱 대신 따옴표로 객체를 생성할 수 있지만,
# 출력할 때에는 문자열로 인식되므로 백틱을 사용해야 함
'2a' <- 4
print(x = '2a')

```

---

### **1-2. 자료구조(1) 벡터 **
  
#### **자료구조의 첫번째 과정으로 '벡터'에 대해 학습하겠습니다.  **
 - 먼저, 자료형(data type)에 대해 간단하게 알아보겠습니다.   
    - 실수형(numeric): 허수를 포함하는 복소수가 아닌 숫자  
    - 정수형(integer): 소수점이 없는 숫자  
    - 문자형(character): 따옴표로 감싼 문자열(string)  
    - 논리형(logical): 따옴표가 없는 TRUE 또는 FALSE만 있는 자료형입니다.  
    - 범주형(factor): 4가지 자료형을 명목형으로 변환하면 범주형(요인)이 됩니다.   
      
    
![자료구조](images/6.jpg){width=100%}
- 아래 자세한 설명이 있습니다.  

![자료구조 설명](images/7.jpg){width=100%}
  - 이제 아래 R 코드를 복사/붙여넣기 하여 한 줄씩 실행해봅니다.  
 
```{r, eval=FALSE}

# 2.2.1 실수형과 정수형 벡터 생성 : c(), c는 combine의 약자입니다. 
# 숫자 1, 2, 3은 실수형 벡터를 생성합니다.
a <- c(1, 2, 3)

# 벡터 a를 출력
print(x = a)

# 벡터 a의 클래스 확인
class(x = a)

# 숫자 뒤에 대문자 L을 붙여야 정수형 벡터를 생성
b <- c(1L, 2L, 3L)

# 벡터 b를 출력
print(x = b)

# 벡터 b의 클래스 확인
class(x = b)

# 벡터를 출력하면 콘솔창 왼쪽에 [1] 형태가 출력되는데
# 괄호안 숫자는 벡터 원소의 인덱스를 가리키는 것임
print(x = 101:150)


# 2.2.2 문자형과 논리형 벡터 생성 : c()
# 따옴표로 감싼 문자열은 문자형 벡터를 생성
c <- c('hello', 'world')

# 벡터 c를 출력
print(x = c)

# 벡터 c의 클래스 확인
class(x = c)

# 따옴표 없는 FALSE와 TRUE는 논리형 벡터를 생성
d <- c(FALSE, TRUE)

# 벡터 d를 출력
print(x = d)

# 벡터 d의 클래스 확인
class(x = d)

# [팁] T와 F를 객체명으로 사용하지 않는 것을 권장!
# T를 출력하면 TRUE가 출력됨
print(x = T)

# T에 F를 할당하고 다시 출력하면 FALSE가 출력됨
T <- F
print(x = T)


# 2.2.3 원소가 없는 빈 벡터 생성
c()

# 2.2.4 범주형 벡터 생성 : factor(), as.factor()
# 문자형 벡터 nat를 생성
nat <- c('한국', '일본', '중국', '미국', '중국', '한국', '미국', '일본')

# 벡터 nat를 출력
print(x = nat)

# 문자형 벡터를 범주형 벡터로 변환
fct <- as.factor(x = nat)

# 벡터 fct를 출력하면 레벨이 추가됨
print(x = fct)

# 범주형 벡터는 정수형 또는 문자형 벡터로 변환 가능
# 범주형 벡터의 원소는 레벨의 인덱스를 가지고 있기 때문
as.integer(x = fct)

# 범주형 벡터를 생성할 때 레벨 순서를 정할 수 있음
fct <- factor(x = nat, levels = c('한국', '미국', '중국', '일본'))

# 벡터 fct를 출력하면 레벨 순서가 달라진 것을 확인
print(x = fct)

# 레벨 순서가 달라졌으므로 레벨의 인덱스도 변경되었음
as.integer(x = fct)


# 2.2.5 원소가 연속되는 벡터 생성 : seq()
# 1부터 3까지 간격이 1인 실수형 벡터 생성
seq(from = 1, to = 3, by = 1)

# 간격이 1 또는 -1이면 콜론 사용 가능
1:3

# 3부터 1까지 간격이 -1인 실수형 벡터 생성
seq(from = 3, to = 1, by = -1)

# 1부터 10까지 간격이 2.5인 실수형 벡터 생성
seq(from = 1, to = 10, by = 2.5)

# 1부터 10까지 원소 개수가 19개인 실수형 벡터 생성
seq(from = 1, to = 10, length = 19)

# 매개변수 생략
seq(1, 3, 1)

# 인수 하나만 설정
seq(3)

# by와 length.out을 동시에 설정하면 에러 발생
seq(1, 3, 1, length.out = 5)

# by를 생략하면 length.out 설정 가능
seq(1, 3, length.out = 5)

# length.out 대신 length 사용 가능
seq(1, 3, length = 5)


# 2.2.6 원소가 반복되는 벡터 생성 : rep()
# 원소가 1개인 벡터를 세 번 반복
rep(x = 1, times = 3)

# 원소가 3개인 벡터를 세 번 반복
rep(x = 1:3, times = 3)

# 벡터의 각 원소를 세 번씩 반복
rep(x = 1:3, each = 3)

# 원소 개수가 10이 될 때까지 반복
rep(x = 1:3, length = 10)


# 2.3.1 인덱싱
print(x = letters)

# 문자형 벡터 letters의 첫 번째 원소만 선택
letters[1]


# 2.3.2 슬라이싱
# 문자형 벡터 letters의 1~5번째 원소를 s에 할당
s <- letters[1:5]
print(x = s)


# [팬시 인덱싱] 벡터 s의 1, 3, 5번째 원소를 선택
s[c(1, 3, 5)]

# [불리언 인덱싱] TRUE 위치에 해당하는 벡터 s의 원소 선택
s[c(TRUE, FALSE, TRUE, FALSE, TRUE)]

```

#### **원소 추가/삭제하기**

![원소 추가/삭제 하기](images/9.jpg){width=100%}


```{r, eval=FALSE}
# 2.4 벡터 원소 추가
# 벡터 s의 여섯 번째 원소 추가
s[6] <- 'f'
print(x = s)

# 벡터 s의 열 번째 원소 추가. 7~9번째 원소는 NA로 생성
s[10] <- 'j'
print(x = s)


# 2.5 벡터 원소 삭제
# 벡터 s의 열 번째 원소를 삭제한 결과를 반환
s[-10]

# 벡터 s를 출력하면 열 번째 원소가 그대로 있음
print(x = s)

# 벡터 s의 열 번째 원소를 삭제한 결과를 s에 재할당
s <- s[-10]

# 벡터 s를 출력하면 열 번째 원소가 삭제되었음
print(x = s)


# 2.6.1 인덱싱과 슬라이싱을 이용해 변경하기
# 벡터 s의 첫 번째 원소를 'A'로 변경
s[1] <- 'A'
print(x = s)

# 벡터 s의 두 번째 원소를 'B'로 변경
s[2] <- 'B'
print(x = s)

# 벡터 s의 1~2 번째 원소를 '가', '나'로 변경
s[1:2] <- c('가', '나')
print(x = s)


# 2.6.2 범주형 벡터 원소 변경하기
# 문자형 벡터는 원소 변경이 쉬움
nat[8] <- '대만'
print(x = nat)

# 범주형 벡터는 레벨에 없는 원소로 변경하려고 하면
# 결측값으로 변환됨
fct[8] <- '대만'
print(x = fct)

# 범주형 벡터의 레벨을 문자형 벡터로 출력하고
# 마지막 레벨로 '대만'을 추가
levels(x = fct)
levels(x = fct)[5] <- '대만'

# 레벨에 있는 원소로는 변경 가능
fct[8] <- '대만'
print(x = fct)
```



#### **Data Type 변경하기**  
  
![R 연산 기호](images/10.jpg){width=100%}

```{r, eval=FALSE}


# 2.7.1 정수로 형변환 : as.integer()
as.integer(x = 1.2)
as.integer(x = '1.2')
as.integer(x = FALSE)

# 2.7.2 실수로 형변환 : as.numeric()
as.numeric(x = 1L)
as.numeric(x = '1.2')
as.numeric(x = TRUE)

# 2.7.3 문자열로 형변환 : as.character() 
as.character(x = 1L)
as.character(x = 1.2)
as.character(x = TRUE)

# 2.7.4 논리형으로 형변환 : as.logical()
as.logical(x = 0)
as.logical(x = 1.2)
as.logical(x = '1.2')

# 2.7.5 범주형으로 형변환 : as.factor()
e <- as.factor(x = c)
print(x = e)
class(x = e)
as.integer(x = e)

# 2.8 벡터 강제변환
c <- c('hello', 'world')
d <- c(FALSE, TRUE)
e <- as.factor(x = c)

# 논리형 벡터와 범주형 벡터가 결합하면 
# 정수형 벡터로 강제변환됨
f <- c(d, e)
print(x = f)
class(x = f)

# 정수형 벡터에 실수형 스칼라가 결합하면
# 실수형 벡터로 강제변환됨
f <- c(f, 3)
print(x = f)
class(x = f)

# 실수형 벡터에 문자형 스칼라가 결합하면
# 문자형 벡터로 강제변환됨
f <- c(f, '4')
print(x = f)
class(x = f)

```


#### **기본 연산 기호 확인하기**  
  
![R 연산 기호](images/11.jpg){width=100%}
  
```{r, eval=FALSE}
# 2.9.1 덧셈, 뺄셈 연산
# 원소 개수가 같은 벡터 생성
a <- c(0, 2, 4)
b <- c(1, 2, 3)

# 원소 개수가 같은 벡터끼리 덧셈, 뺄셈 연산
a + b
a - b

# a와 원소 개수가 다른 벡터 생성
c <- seq(from = 1, to = 11, by = 2)
d <- seq(from = 3, to = 12, by = 3)

# 원소 개수가 서로 다른 벡터로 덧셈 연산을 하면
# 원소 개수가 적은 벡터가 확장됨 (extention)
a + c
a + d
a + 1

# 2.9.2 곱셈, 나눗셈, 나머지, 몫, 거듭제곱 연산
a * 2
a ^ 2
a / 2
a %% 2
a %/% 2

# 2.10 비교 연산자
a > 2
a >= 2
a < 2
a <= 2
a == 2
a != 2

# 2.11 논리 연산자
a >= 1
b <= 2
a >= 1 & b <= 2
a >= 1 | b <= 2
!(a >= 1 & b <= 2)

# 2.12 멤버 연산자 : %in%
x <- 0
x == a[1]
x == a[2]
x == a[3]
x == a[1] | x == a[2] | x == a[3]
x %in% a


```

---

### **1-3. 자료구조(2) 리스트 **
  
- 아래 그림을 다시 한번 확인 한 뒤, 코드를 복사/붙여넣기 하여 한 줄씩 실행해봅니다. 

![자료구조](images/6.jpg){width=100%}

```{r eval=FALSE}

# 3.2 리스트 생성 : list()
# 리스트의 원소로 사용될 길이가 다른 벡터 생성
num <- seq(from = 1, to = 10, by = 2)
cha <- rep(x = c('a', 'b'), each = 3)

# 원소명이 없는 리스트 생성
lst1 <- list(num, cha)

# lst1을 출력
print(x = lst1)

# lst1의 클래스 확인
class(x = lst1)

# lst1의 구조 확인
str(object = lst1)

# 원소명이 있는 리스트 생성
lst2 <- list(a = num, b = cha, c = lst1)

# lst2를 출력
print(x = lst2)

# lst2의 클래스 확인
class(x = lst2)

# lst2의 구조 확인
str(object = lst2)


# 3.3 리스트 원소 선택
# 원소명이 없는 리스트에서 원소명이 a인 원소 선택
lst1$a

# 원소명이 있는 리스트에서 원소명이 a인 원소 선택
lst2$a

# 겹대괄호를 사용하여 리스트의 첫 번째 원소 선택
lst1[[1]]

# 겹대괄호에 정수를 두 개 이상 지정하면 에러 발생
lst2[[1, 3]]


# str() 함수로 리스트 구조 파악하기
# R 내장 데이터프레임 women으로 선형 회귀모형 적합
fit <- lm(formula = weight ~ height, data = women)

# fit의 구조 확인
str(object = fit)

# 회귀계수 벡터만 선택
fit$coefficients


# 대괄호를 사용하여 첫 번째 원소를 리스트로 반환
lst2[1]

# 대괄호 안에 원소가 2개 이상인 벡터 지정
lst2[c(1, 3)]


# 3.4 리스트 원소 추가
# lst2에 새로운 원소 추가
lst2$d <- 1:5

# lst2의 구조 확인
str(object = lst2)


# 3.5 리스트 원소 삭제
# lst2에서 원소명이 a인 원소 삭제
lst2$a <- NULL

# lst2의 구조 확인
str(object = lst2)


# 3.6 리스트 원소 변경
# lst2에서 원소명이 b인 원소 변경
lst2$b <- letters[1:5]

# lst2에서 원소명이 b인 원소 출력
print(x = lst2$b)

# 리스트의 원소가 벡터일 때, 일부 원소만 변경
lst2$b[1] <- 'A'

# lst2에서 원소명이 b인 원소 출력
print(x = lst2$b)


## End of Document

```


---

### **1-4. 자료구조(3) 데이터프레임 **

#### **데이터 프레임 소개**  
  
![R 연산 기호](images/15.png){width=100%}
  
 - 아래 R 코드를 복사/붙여넣기하여 한 줄씩 실행해봅니다.   
  
```{r eval=FALSE}

# 4.2.1 두 벡터로 데이터프레임 생성하기 : data.frame()
# 데이터프레임의 원소로 사용될 길이가 다른 벡터 생성
num <- seq(from = 1, to = 10, by = 2)
chr <- rep(x = c('a', 'b'), each = 3)

# 길이가 다른 열벡터로 데이터프레임 생성 <-  에러가 발생합니다.
df1 <- data.frame(num, chr)

# cha의 길이를 num과 같도록 새로 생성
cha <- letters[1:5]

# 길이가 같은 열벡터로 데이터프레임 생성
df1 <- data.frame(num, cha)

# df1을 출력
print(x = df1)

# df1의 클래스 확인
class(x = df1)


# 4.2.2 데이터프레임의 구조와 값 확인하기 : str()
# df1의 구조 확인
str(object = df1)

# 최대 출력 옵션 확인
options('max.print')

# df1이 스크립트 창에서 새 탭으로 열림
View(x = df1)

# stringsAsFactors 옵션 확인
options('stringsAsFactors')

# data.frame() 함수에 stringsAsFactors 옵션 추가
df2 <- data.frame(num, cha, stringsAsFactors = TRUE)

# df2의 구조 확인
str(object = df2)


# 4.3.1 인덱싱으로 선택하기
# df1의 1행, 1열 선택
df1[1, 1]

# df1의 1~2행, 1~2열 선택
df1[1:2, 1:2]

# df1의 1행 선택
df1[1, ]

# df1의 1~2행 선택
df1[1:2, ]

# df1의 1열 선택
df1[, 1]

# df1의 1~2열 선택
df1[, 1:2]


# 4.3.2 문자형 벡터로 열 선택하기
# df1에서 열이름이 num인 열 선택
df1[, 'num']

# df1에서 열이름이 num과 cha인 열 선택
df1[, c('num', 'cha')]

# df1에서 열이름이 num인 열 선택
df1$num

# df1에서 열이름이 cha인 열 선택
df1$cha


# 4.3.4 TRUE/FALSE로 반환받기
# 비교 연산으로 논리형 벡터 반환
df1$num >= 5

# 홑대괄호 안에 논리형 벡터를 추가하여 불리언 인덱싱 실행
df1[df1$num >= 5, ]

# df1$num의 원소가 5 이상인 행의 cha인 열 선택
df1[df1$num >= 5, 'cha']

# df1$num의 원소가 5 이상인 행의 cha인 열 선택
df1$cha[df1$num >= 5]


# 4.4.1 데이터프레임에 원소 추가하기 : $ 
# df1에 새로운 열 추가
df1$int <- 11:15

# df1의 구조 확인
str(object = df1)


# 4.4.2 데이터프레임에 열 추가하기 : cbind()
# 기존 데이터프레임에 새로운 열벡터를 추가한 결과 출력
cbind(df1, rep(x = TRUE, times = 5))

# 기존 데이터프레임에 새로운 열벡터를 추가한 결과 출력
cbind(df1, log = rep(x = TRUE, times = 5))

# df1의 구조 확인
str(object = df1)

# cbind() 함수 실행 결과를 df1에 재할당
df1 <- cbind(df1, log = rep(x = TRUE, times = 5))

# df1의 구조 다시 확인
str(object = df1)


# 4.4.3 데이터프레임에 행 추가하기 : rbind()
# df1과 열이름이 같은 새로운 데이터프레임 생성
df3 <- data.frame(num = 6, cha = 'f', int = 16, log = TRUE)

# 기존 데이터프레임에 새로운 행을 추가한 결과 출력
rbind(df1, df3)

# df1의 구조 확인
str(object = df1)


# 4.5.1 열벡터 삭제하기 : $ 
# 데이터프레임의 열 삭제
df1$num <- NULL

# df1의 구조 확인
str(object = df1)


# 4.5.1 행 또는 열 삭제하기 : 인덱싱
# df1의 1행, 1열을 삭제한 결과 출력
df1[-1, -1]

# df1의 1행을 삭제한 결과 출력
df1[-1, ]

# df1의 1열을 삭제한 결과 출력
df1[, -1]


# 4.6 데이터프레임 원소 변경
# 데이터프레임의 원소 변경
df1$cha <- LETTERS[1:5]

# df1 출력
print(x = df1)

# 선택된 열벡터의 일부 원소만 변경
df1$int[1] <- '11'

# df1의 구조 확인
str(object = df1)




```

---

## **2. 변수, 함수, 패키지 **
  
  
### **2-1. 변하는 수, '변수' **

#### **변수(Variable)**

  - 다양한 값을 지니고 있는 하나의 속성
  - 변수는 데이터 분석의 대상

![](img/03_01.png){width=100%}

#### **변수 만들기**

![](img/03_02.png){width=80%}

```{r}
a <- 1
a

b <- 2
b

c <- 3
c

d <- 3.5
d
```

  
### **2-2. 마술 상자 같은 '함수' 이해하기**

#### **함수**

- 값을 넣으면 특정한 기능을 수행해 처음과 다른 값이 출력됨

![](img/03_03.png){width=100%}

#### **숫자를 다루는 함수 이용하기**

```{r}
# 변수 만들기
x <- c(1, 2, 3)
x

# 함수 적용하기
mean(x)
max(x)
min(x)
```


#### **문자를 다루는 함수 이용하기**

```{r}
str5 <- c("Hello!", "World", "is", "good!")

str5

paste(str5, collapse = ",")  # 쉼표를 구분자로 str4의 단어들 하나로 합치기
```


#### **함수의 옵션 설정하기 - 파라미터**
```{r}
paste(str5, collapse = " ")
```

#### **함수의 결과물로 새 변수 만들기**
```{r}
x_mean <- mean(x)
x_mean

str5_paste <- paste(str5, collapse = " ")
str5_paste
```

---

### **2-3. 함수 꾸러미, '패키지' 이해하기**


#### **패키지(packages)**

- 함수가 여러 개 들어 있는 꾸러미
- 하나의 패키지 안에 다양한 함수가 들어있음
- 함수를 사용하려면 패키지 설치 먼저 해야함

![](img/03_04.png){width=10%}  

![](img/03_05.png){width=100%}


#### **ggplot2 패키지 설치하기, 로드하기**

```{r, eval=F}
install.packages("ggplot2")  # ggplot2 패키지 설치
library(ggplot2)             # ggplot2 패키지 로드
```


---  

  
## **연습 1: Console과 Editor**
* Console에 아래 내용을 한 줄씩 입력하고 엔터키를 치세요. Console과 Environment에서 결과를 확인해보세요. 
```{r, eval=FALSE}
a <- 1
a
b = 2
a + b
```
* 이번에는 Environment 창에 있는 작은 빗자루를 클릭하세요. Console에 `a`를 입력하면 어떻게 될까요?
* 이제 위의 코드를 Editor에 입력합시다. 네 줄을 한꺼번에 실행하려면 어떻게 하면 될까요? 한 줄씩 실행하려면 어떻게 하면 될까요?


## **연습 2: Generating normally distributed numbers**
* 정규분포에서 무작위로 숫자를 추출해봅시다. 그보다 먼저, Google에서 "R random normal distribution"를 키워드로 검색하세요.
    + 검색결과 중에서 '[Probabilities and Distributions | R Learning Modules](https://stats.oarc.ucla.edu/r/modules/probabilities-and-distributions/)' 페이지에 방문해보세요. 
    + 사례로 나오는 코드를 참고하여 새 코드를 작성해봅시다. 아래 각 줄을 콘솔에 직접 입력해도 좋고, 에디터에 입력후 하나씩 실행해도 좋습니다.
```{r eval=FALSE}
a <- rnorm(n=100, mean=0, sd=1)
?rnorm
plot(a)
hist(a)
```
* 같은 요령으로 **uniform distribution**의 무선표본을 추출해볼 수 있습니다.  
  0과 1 사이에서 1000개의 값을 추출하여 히스토그램으로 그려보세요.


## **연습 3: Simpson's paradox**

* SPSS, SAS와 같은 상용 툴보다 Google(Stackoverflow, Github 등)에서  
  활발하게 질의응답이 이루어지고 있습니다. 모르는 내용이 나오거나 에러가 나면 Google 검색을 해보세요. 
    
* R에 내장된 UC Berkeley 합격자 자료를 살펴보겠습니다. 

```{r eval=FALSE}
UCBAdmissions  # 몇 차원의 자료인가요?
?UCBAdmissions # 도움말과 함께 다시 한번 자료를 봅시다.
apply(UCBAdmissions, c(1,2), sum)
```

* 마지막 명령어는 `apply`를 사용하여 세 번째 차원을 무시하고 첫 번째와 두 번째 차원을 기준으로 자료를 합쳤습니다. 결과를 살펴봅시다. 어떤 판단을 내릴 수 있을까요?
* 이제 자료를 시각화하는 방법을 생각해봅시다. **vcd**라는 패키지를 설치하고, 이를 이용하여 **모자이크 플롯**을 그려보겠습니다. 

```{r eval=FALSE}
library(vcd) # 아까 설치했던 vcd를 사용할 준비를 합니다.
mosaic(~Dept + Admit + Gender, UCBAdmissions)
colnames(UCBAdmissions) = c("M", "F")
mosaic(~Dept + Admit + Gender, UCBAdmissions)
```


  
